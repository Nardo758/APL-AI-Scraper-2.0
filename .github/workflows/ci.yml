name: Node.js CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Print environment info
        run: |
          echo "=== environment ==="
          node --version
          npm --version
          uname -a
          echo "=== repo files (top) ==="
          ls -la | sed -n '1,200p'

      - name: Install system dependencies for native modules
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev python3

      - name: Create test directories
        run: |
          mkdir -p test-results/junit
          mkdir -p test-results/eslint
          mkdir -p coverage

      - name: Install dependencies (safe)
        run: |
          if [ -f package-lock.json ]; then
            echo "package-lock.json found — using npm ci"
            npm ci --no-audit --no-fund
          else
            echo "No package-lock.json — falling back to npm install"
            npm install --no-audit --no-fund
          fi

      - name: Run linting (only if configured)
        run: |
          if [ -f package.json ] && grep -q '"eslint"' package.json; then
            echo "eslint appears in package.json — running eslint"
            npx eslint . --ext .js --max-warnings 0
          else
            echo "eslint not configured in package.json — skipping lint"
          fi

      - name: Run unit tests (with coverage)
        env:
          NODE_ENV: test
          CI: true
          # Test environment variables (use placeholder values for CI)
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test-key-placeholder' }}
          MASTER_ENCRYPTION_KEY: ${{ secrets.MASTER_ENCRYPTION_KEY || 'test-encryption-key-placeholder' }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL || 'https://test.supabase.co' }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY || 'test-anon-key' }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY || 'test-service-key' }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY || 'test-encryption-key-32-chars-long' }}
        run: npm test -- --coverage

      - name: Upload coverage reports to Codecov (only if generated)
        run: |
          if [ -f ./coverage/lcov.info ]; then
            echo "Found coverage file — uploading to Codecov"
            npx codecov -f ./coverage/lcov.info -F unittests -n codecov-umbrella || echo "Codecov upload failed (non-blocking)"
          else
            echo "No coverage file found — skipping Codecov upload"
          fi

  security-scan:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies for security scan
        run: |
          if [ -f package-lock.json ]; then
            npm ci --no-audit --no-fund
          else
            npm install --no-audit --no-fund
          fi

      - name: Run security audit (non-fatal)
        run: |
          echo "Running npm audit in non-fatal mode (will not fail the workflow)"
          npm audit --audit-level moderate || echo "npm audit reported issues (non-fatal)"

      - name: Run Snyk security scan (only when SNYK_TOKEN is configured)
        if: ${{ secrets.SNYK_TOKEN }}
        uses: snyk/actions/node@v1
        env:
          SNYK_TOKEN: "${{ secrets.SNYK_TOKEN }}"
        with:
          args: --severity-threshold=high
