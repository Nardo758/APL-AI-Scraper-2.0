name: Simplified CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test (${{ matrix.os }} - Node ${{ matrix.node-version }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Print environment info
        run: |
          echo "=== Environment Information ==="
          node --version
          npm --version
          echo "OS: ${{ matrix.os }}"
          echo "Node: ${{ matrix.node-version }}"

      - name: Install system dependencies (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev python3

      - name: Create test directories
        run: |
          mkdir -p test-results/junit
          mkdir -p test-results/eslint
        shell: bash

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            echo "Using npm ci for locked dependencies"
            npm ci --no-audit --no-fund
          else
            echo "Using npm install"
            npm install --no-audit --no-fund
          fi
        shell: bash

      - name: Run linting
        run: |
          echo "Running ESLint..."
          npx eslint . --ext .js --max-warnings 0 --format checkstyle > ./test-results/eslint/results.xml || echo "Linting issues found"
          echo "Linting completed"
        continue-on-error: true

      - name: Run unit tests
        env:
          NODE_ENV: test
          CI: true
          # Use placeholder values for required environment variables
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test-key-placeholder' }}
          MASTER_ENCRYPTION_KEY: ${{ secrets.MASTER_ENCRYPTION_KEY || 'test-encryption-key-placeholder-12345' }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL || 'https://test.supabase.co' }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY || 'test-anon-key' }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY || 'test-service-key' }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY || 'test-encryption-key-32-chars-long!' }}
          REDIS_URL: ''
        run: |
          echo "Running unit tests..."
          npm test
          echo "Unit tests completed"

      - name: Run integration tests
        env:
          NODE_ENV: test
          CI: true
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test-key-placeholder' }}
          MASTER_ENCRYPTION_KEY: ${{ secrets.MASTER_ENCRYPTION_KEY || 'test-encryption-key-placeholder-12345' }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL || 'https://test.supabase.co' }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY || 'test-anon-key' }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY || 'test-service-key' }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY || 'test-encryption-key-32-chars-long!' }}
          REDIS_URL: ''
        run: |
          echo "Running integration tests..."
          npm run test:integration
          echo "Integration tests completed"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}
          path: |
            coverage/
            test-results/
          retention-days: 30

  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Run build script
        run: |
          echo "Running build verification..."
          npm run build
          echo "Build verification completed"

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Run security audit
        run: |
          echo "Running npm audit..."
          npm audit --audit-level moderate || echo "Security issues found (non-blocking)"
          echo "Security audit completed"